---
import SelectLocation from "./SelectLocation.astro";
import { translations } from "../translations/i18n.ts";
export interface Props {
  lang: "en" | "es" | "pt"; // Asegura que solo acepte estos valores
}

const { lang } = Astro.props; // 游댠 Recibe `lang` correctamente

// 游늷 Correcci칩n: Asegura que `lang` es una de las claves de `translations`
const t = translations[lang as keyof typeof translations];

const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
---

<div id="recaptcha-container" data-sitekey={recaptchaSiteKey}></div>


<!-- Pasar las traducciones al script usando un atributo data-* -->
<div id="translations" data-translations={JSON.stringify(t)}></div>

<div>
  <form id="contact-form" method="POST" novalidate>
    <div class="pb-4">
      <h2 class="text-4xl text-white font-semibold">{t.formTitle}</h2>
      <p class="text-white mt-2">{t.formSubtitle}</p>
    </div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="text"
      id="name"
      name="name"
      autocomplete="name"
      placeholder={t.name}
      required
    />
    <div id="name-error" class="error-message"></div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="text"
      id="lastname"
      name="lastname"
      autocomplete="family-name"
      placeholder={t.lastname}
      required
    />
    <div id="lastname-error" class="error-message"></div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="tel"
      id="phone"
      name="phone"
      autocomplete="phone"
      placeholder={t.phone}
      required
    />
    <div id="phone-error" class="error-message"></div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="email"
      id="email"
      name="email"
      autocomplete="email"
      placeholder={t.email}
      required
    />
    <div id="email-error" class="error-message"></div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="text"
      id="company"
      name="company"
      autocomplete="company"
      placeholder={t.company}
      required
    />
    <div id="company-error" class="error-message"></div>

    <input
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      type="text"
      id="position"
      name="position"
      autocomplete="position"
      placeholder={t.position}
      required
    />
    <div id="position-error" class="error-message"></div>

    <!-- <input class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500" type="text" id="country" name="country" autocomplete="country" placeholder={t.country} required />
    <div id="country-error" class="error-message"></div> -->

    <SelectLocation lang={lang} />

    <input class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500" type="text" id="city" name="city" autocomplete="address-level2" placeholder={t.city} required />
        <div id="city-error" class="error-message"></div>

    <textarea
      class="w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500"
      id="message"
      name="message"
      autocomplete="off"
      placeholder={t.message}
      required></textarea>
    <div id="message-error" class="error-message"></div>

    <div class="grid grid-cols-12 gap-4">
      <div class="col-span-8">
        <label for="recipients" class="text-white hidden">Enviar a:</label>
        <button class="cursor-pointer" type="submit">{t.submit}</button>
        <select
          class="cursor-pointer w-full px-4 py-2 rounded-lg border-2 border-white focus:ring-2 focus:ring-blue-500 focus:outline-blue-500 hidden"
          id="recipients"
          name="recipients"
          autocomplete="off"
          required
        >
          <option value="ldevesa@latcom.com">comercial</option>
          <!-- <option
            value="ldevesa@latcom.com, esobrino@latcom.com,kvazquez@latcom.com,vmuscatello@latcom.com,vpbueno@latcom.com"
            >Soy proveedor</option
          >
          <option
            value="ldevesa@latcom.com, kvazquez@latcom.com,marketing@latcom.com,vbueno@latcom.com,vpbueno@latcom.com"
            >Soy anunciante</option
          >
          <option
            value="ldevesa@latcom.com, rrhh@latcom.com,mbagatini@latcom.com,vpbueno@latcom.com"
            >Quiero postularme</option
          >
          <option
            value="ldevesa@latcom.com, marketing@latcom.com,vpbueno@latcom.com"
            >Otras consultas</option
          > -->
        </select>
      </div>
      <div class="col-span-4 flex items-end">
        <button class="cursor-pointer hidden" type="submit">{t.submit}</button>
      </div>
    </div>
  </form>
</div>

<style>
  /* Estilos b치sicos */
</style>

<script type="module">
  // Obtener la clave de reCAPTCHA del atributo data-sitekey
  const recaptchaContainer = document.getElementById("recaptcha-container");
  const recaptchaSiteKey = recaptchaContainer?.dataset.sitekey || 'default-key';
  console.log("Clave de reCAPTCHA:", recaptchaSiteKey);
  // Obtener las traducciones del atributo data-translations
  const translationsElement = document.getElementById("translations");
  const t = translationsElement
    ? JSON.parse(translationsElement.dataset.translations || "{}")
    : {};

  // Aqu칤 puedes agregar JavaScript si necesitas validar el formulario
  document
    .getElementById("contact-form")
    .addEventListener("submit", async function (event) {
      event.preventDefault(); // Prevenir la recarga de la p치gina

      // Deshabilitar el bot칩n de enviar
      const submitButton = document.querySelector('button[type="submit"]');
      submitButton.disabled = true;
      submitButton.textContent = t.submitting || "Enviando...";

      let formIsValid = true; // Variable para verificar si el formulario es v치lido

      // Limpiar mensajes de error antes de validar
      document.querySelectorAll(".error-message").forEach(function (msg) {
        msg.textContent = "";
      });

      const formData = new FormData(this); // Obtener los datos del formulario

      // Validaci칩n
      const name = document.getElementById("name");
      const lastname = document.getElementById("lastname");
      const phone = document.getElementById("phone");
      const email = document.getElementById("email");
      const company = document.getElementById("company");
      const position = document.getElementById("position");
      const country = document.getElementById("country");
      const city = document.getElementById("city");
      const message = document.getElementById("message");

      // Validar nombre
      if (name.value.trim() === "") {
        document.getElementById("name-error").textContent =
          t.errorName || "Por favor, ingresa tu nombre.";
        formIsValid = false;
      }

      // Validar apellido
      if (lastname.value.trim() === "") {
        document.getElementById("lastname-error").textContent =
          t.errorLastname || "Por favor, ingresa tu apellido.";
        formIsValid = false;
      }

      // Validar telefoneo
      if (phone.value.trim() === "") {
        document.getElementById("phone-error").textContent =
          t.errorPhone || "Por favor, ingresa un telefono v치lido.";
        formIsValid = false;
      }

      // Validar correo electr칩nico
      if (email.value.trim() === "" || !validateEmail(email.value)) {
        document.getElementById("email-error").textContent =
          t.errorEmail || "Por favor, ingresa un correo v치lido.";
        formIsValid = false;
      }

      // Validar empresa
      if (company.value.trim() === "") {
        document.getElementById("company-error").textContent =
          t.errorCompany || "Por favor, ingresa tu empresa.";
        formIsValid = false;
      }

      // Validar cargo
      if (position.value.trim() === "") {
        document.getElementById("position-error").textContent =
          t.errorPosition || "Por favor, ingresa tu cargo.";
        formIsValid = false;
      }

      // Validar pa칤s
      if (country.value.trim() === "") {
        document.getElementById("country-error").textContent =
          t.errorCountry ||  "Por favor, ingresa tu pa칤s.";
        formIsValid = false;
      }

      // Validar ciudad
      if (city.value.trim() === "") {
        document.getElementById("city-error").textContent =
          t.errorCity || "Por favor, ingresa tu pa칤s.";
        formIsValid = false;
      }

      // Validar mensaje
      if (message.value.trim() === "") {
        document.getElementById("message-error").textContent =
          t.errorMessage || "El mensaje es obligatorio.";
        formIsValid = false;
      }

      // Si el formulario es v치lido, enviarlo
      if (formIsValid) {
        try {
          // 游띔 Asegurar que grecaptcha est치 listo antes de enviar el formulario
          const token = await grecaptcha.execute(
              recaptchaSiteKey,
            { action: "submit" }
          );
          if (!token) {
            alert("Error: No se pudo generar el token de reCAPTCHA.");
            return;
          }

          console.log("Token generado:", token); // 游댌 Verificar en consola

          // Crear FormData y agregar el token
          const formData = new FormData(
            document.getElementById("contact-form")
          );
          formData.append("recaptcha-token", token);

          console.log("Enviando datos al servidor...");

          console.log("FormData antes de enviar:");
          for (let pair of formData.entries()) {
            console.log(pair[0] + ": " + pair[1]);
          }

          const response = await fetch("/landingform/server/send-email.php", {
            method: "POST",
            /* headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            }, */
            body: formData,
          });

          console.log("Respuesta sin procesar:", response); // 游댌 Ver si llega algo

          const result = await response.json();
          console.log("Respuesta del servidor:", result);

          if (result.success) {
            alert("춰Mensaje enviado correctamente!");
            // Vaciar los campos del formulario
            document.getElementById("contact-form").reset();
          } else {
            alert("Error: " + result.message);
          }
        } catch (error) {
          alert("Hubo un error al procesar el formulario.");
        } finally {
          // Volver a habilitar el bot칩n de enviar
          submitButton.disabled = false;
          submitButton.textContent = t.submit || "Enviar";
        }
      } else {
        // Si el formulario no es v치lido, volver a habilitar el bot칩n
        submitButton.disabled = false;
        submitButton.textContent = t.submit || "Enviar";
      }
    });

  // Funci칩n para validar el correo electr칩nico
  function validateEmail(email) {
    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email);
  }
</script>